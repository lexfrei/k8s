global:
  domain: argocd.lex.la
configs:
  params:
    server:
      insecure: true
  cm:
    accounts.admin: apiKey, login
    application.resourceTrackingMethod: annotation
    resource.compareoptions: |
      ignoreAggregatedRoles: true
    resource.exclusions: |
      - apiGroups:
        - "*"
        kinds:
        - ProviderConfigUsage
    resource.customizations: |
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }
          if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status
server:
  ingress:
    enabled: true
    hostname: argocd.lex.la
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: tunnel

      external-dns.alpha.kubernetes.io/target: "4a0cf464-58f0-4d24-87cd-e87ad3c0a136.cfargotunnel.com"
      external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
  # extensions:
  #   enabled: true
  #   extensionList:
  #     - name: extension-trivy
  #       env:
  #         - name: EXTENSION_URL
  #           value: https://github.com/lexfrei/argocd-trivy-extension/releases/download/v0.2.0/extension-trivy.tar
  #         - name: EXTENSION_CHECKSUM_URL
  #           value: https://github.com/lexfrei/argocd-trivy-extension/releases/download/v0.2.0/extension-trivy_checksums.txt
